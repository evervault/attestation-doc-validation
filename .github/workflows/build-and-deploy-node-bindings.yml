name: Build and deploy node bindings
env:
  DEBUG: napi:*
  APP_NAME: evervault-attestation-bindings
  SUBDIRECTORY: node-attestation-bindings
  MACOSX_DEPLOYMENT_TARGET: "10.13"
"on":
  push:
    branches:
      - main
    tags:
      - "node/v*"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              yarn build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: set -e && apk add perl openssl && yarn build && strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              yarn build --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              yarn build --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: |
              yarn build --target armv7-linux-androideabi
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              apk add perl openssl &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ${{ env.SUBDIRECTORY }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.SUBDIRECTORY }}/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          architecture: x86
          cache-dependency-path: ./${{ env.SUBDIRECTORY }}/yarn.lock
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}/${{ env.SUBDIRECTORY }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./${{ env.SUBDIRECTORY }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  # Node version has been descoped to v18 for the following tests. Tests on 14 and 16 are hanging.
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          # - "14"
          # - "16"
          - "18"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.SUBDIRECTORY }}/yarn.lock
      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: davidB/rust-cargo-make@10579dcff82285736fad5291533b52d3c93d6b3b
      - name: Install dependencies
        run: cd ${{ env.SUBDIRECTORY }} ; yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ${{ env.SUBDIRECTORY }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: cd ${{ env.SUBDIRECTORY }} ; cargo make test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          # - "14"
          # - "16"
          - "18"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.SUBDIRECTORY }}/yarn.lock
      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: davidB/rust-cargo-make@10579dcff82285736fad5291533b52d3c93d6b3b
      - name: Install dependencies
        run: |
          cd ${{ env.SUBDIRECTORY }}
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: ${{ env.SUBDIRECTORY }}
      - name: List packages
        run: cd ${{ env.SUBDIRECTORY }} ; ls -R .
        shell: bash
      - name: Test bindings
        run: cd ${{ env.SUBDIRECTORY }} ; cargo make test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          # - "14"
          # - "16"
          - "18"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SUBDIRECTORY }}
    steps:
      - uses: actions/checkout@v3
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: ${{ env.SUBDIRECTORY }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs:aarch64-${{ matrix.node }}
          options: "-v ${{ github.workspace }}/${{ env.SUBDIRECTORY }}:/build -v ${{ github.workspace }}/test-specs:/test-specs -v ${{ github.workspace }}/test-data:/test-data -w /build"
          run: |
            set -e
            apt-get install -y libfaketime
            export FAKETIME="2023-09-18 15:16:05" 
            LD_PRELOAD=/usr/lib/aarch64-linux-gnu/faketime/libfaketime.so.1 yarn test
            ls -la
  # test-linux-aarch64-musl-binding:
  #   name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ env.SUBDIRECTORY }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-aarch64-unknown-linux-musl
  #         path: ${{ env.SUBDIRECTORY }}
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Install dependencies
  #       run: |
  #         yarn config set supportedArchitectures.cpu "arm64"
  #         yarn config set supportedArchitectures.libc "musl"
  #         yarn install
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: multiarch/alpine:aarch64-latest-stable
  #         options: "-v ${{ github.workspace }}/${{ env.SUBDIRECTORY }}:/build -v ${{ github.workspace }}/test-specs:/test-specs -v ${{ github.workspace }}/test-data:/test-data -w /build"
  #         run: |
  #           apk upgrade ; apk update ; apk add nodejs npm yarn
  #           apk add libfaketime --repository=https://dl-cdn.alpinelinux.org/alpine/edge/testing
  #           export FAKETIME="2023-09-18 15:16:05" 
  #           LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1 yarn test || exit 1
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          # - "14"
          # - "16"
          - "18"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SUBDIRECTORY }}
    steps:
      - uses: actions/checkout@v3
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: ${{ env.SUBDIRECTORY }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs:armhf-${{ matrix.node }}
          options: "-v ${{ github.workspace }}/${{ env.SUBDIRECTORY }}:/build -v ${{ github.workspace }}/test-specs/ga:/test-specs/ga -v ${{ github.workspace }}/test-data:/test-data -w /build"
          run: |
            set -e
            apt-get install -y libfaketime
            export FAKETIME="2023-09-18 15:16:05" 
            LD_PRELOAD=/usr/lib/arm-linux-gnueabihf/faketime/libfaketime.so.1 yarn test
            ls -la
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ${{ env.SUBDIRECTORY }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.SUBDIRECTORY }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-apple-darwin
          path: ${{ env.SUBDIRECTORY }}/artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-apple-darwin
          path: ${{ env.SUBDIRECTORY }}/artifacts
      - name: Combine binaries
        run: yarn universal
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.SUBDIRECTORY }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref,'refs/tags/node/v') }}
    needs:
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      # - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - universal-macOS
    steps:
      - name: Get version from tag
        id: get-version
        run: |
          echo "using version tag ${GITHUB_REF:16}"
      - uses: actions/checkout@v3
      - name: Assert versions match
        run: |
          PACKAGE_VERSION=$(cat ./node-attestation-bindings/package.json | jq .version | tr -d '"')
          if [ "$PACKAGE_VERSION" != "${GITHUB_REF:16}" ]; then
            echo "Version in tag does not match package.json"
            echo "Expected $PACKAGE_VERSION, Found ${GITHUB_REF:16}"
            exit 1
          fi
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.SUBDIRECTORY }}/yarn.lock
          registry-url: https://registry.npmjs.org/
      - name: Install dependencies
        run: cd ${{ env.SUBDIRECTORY }} ; yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.SUBDIRECTORY }}/artifacts
      - name: Move artifacts
        run: cd ${{ env.SUBDIRECTORY }} ; yarn artifacts
      - name: List packages
        run: cd ${{ env.SUBDIRECTORY }} ; ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          cd ${{ env.SUBDIRECTORY }} ; npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
